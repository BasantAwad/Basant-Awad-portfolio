{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};export const ThemeProvider=_ref=>{let{children}=_ref;const[isDarkMode,setIsDarkMode]=useState(()=>{// Check localStorage for saved preference\nconst saved=localStorage.getItem('darkMode');if(saved!==null){return JSON.parse(saved);}// Default to light mode\nreturn false;});useEffect(()=>{// Save preference to localStorage\nlocalStorage.setItem('darkMode',JSON.stringify(isDarkMode));// Apply theme to body\nif(isDarkMode){document.body.classList.add('dark-mode');}else{document.body.classList.remove('dark-mode');}},[isDarkMode]);const toggleTheme=()=>{setIsDarkMode(prev=>!prev);};const value={isDarkMode,toggleTheme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","useTheme","context","Error","ThemeProvider","_ref","children","isDarkMode","setIsDarkMode","saved","localStorage","getItem","JSON","parse","setItem","stringify","document","body","classList","add","remove","toggleTheme","prev","value","Provider"],"sources":["C:/Users/Pc/Basant-Awad/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(() => {\r\n    // Check localStorage for saved preference\r\n    const saved = localStorage.getItem('darkMode');\r\n    if (saved !== null) {\r\n      return JSON.parse(saved);\r\n    }\r\n    // Default to light mode\r\n    return false;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Save preference to localStorage\r\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\r\n    \r\n    // Apply theme to body\r\n    if (isDarkMode) {\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n  }, [isDarkMode]);\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(prev => !prev);\r\n  };\r\n\r\n  const value = {\r\n    isDarkMode,\r\n    toggleTheme\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAO,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGP,UAAU,CAACK,YAAY,CAAC,CACxC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAAC,IAAM,CACjD;AACA,KAAM,CAAAa,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC9C,GAAIF,KAAK,GAAK,IAAI,CAAE,CAClB,MAAO,CAAAG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAC1B,CACA;AACA,MAAO,MAAK,CACd,CAAC,CAAC,CAEFZ,SAAS,CAAC,IAAM,CACd;AACAa,YAAY,CAACI,OAAO,CAAC,UAAU,CAAEF,IAAI,CAACG,SAAS,CAACR,UAAU,CAAC,CAAC,CAE5D;AACA,GAAIA,UAAU,CAAE,CACdS,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC,CAC1C,CAAC,IAAM,CACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC,CAC7C,CACF,CAAC,CAAE,CAACb,UAAU,CAAC,CAAC,CAEhB,KAAM,CAAAc,WAAW,CAAGA,CAAA,GAAM,CACxBb,aAAa,CAACc,IAAI,EAAI,CAACA,IAAI,CAAC,CAC9B,CAAC,CAED,KAAM,CAAAC,KAAK,CAAG,CACZhB,UAAU,CACVc,WACF,CAAC,CAED,mBACEtB,IAAA,CAACC,YAAY,CAACwB,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAjB,QAAA,CACjCA,QAAQ,CACY,CAAC,CAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}